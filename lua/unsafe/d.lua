return function()
  local ffi = require("ffi")

  local root = debug.getinfo(1, "S").source:sub(2, -20)
  ffi.load(root .. "build/unsafe.so")
--   local f = io.open(root. "src/nvim.h")
--   local data = f:read("*a")
--   f:close()
--   ffi.cdef()
--   ffi.cdef[[
-- typedef bool Boolean;
-- typedef int64_t Integer;
-- typedef double Float;
-- typedef struct {
--   char *data;
--   size_t size;
-- } String;
-- typedef enum {
--   kErrorTypeNone = -1,
--   kErrorTypeException,
--   kErrorTypeValidation,
-- } ErrorType;
-- typedef struct {
--   ErrorType type;
--   char *msg;
-- } Error;
-- typedef struct object Object;
-- typedef struct { 
--   size_t size; 
--   size_t capacity; 
--   Object *items; 
-- } Array;

-- struct key_value_pair {
--   String key;
--   Object value;
-- };
-- typedef struct key_value_pair KeyValuePair;
-- typedef struct { 
--   size_t size; 
--   size_t capacity; 
--   KeyValuePair *items; 
-- } Dictionary;

-- typedef enum {
--   kObjectTypeNil = 0,
--   kObjectTypeBoolean,
--   kObjectTypeInteger,
--   kObjectTypeFloat,
--   kObjectTypeString,
--   kObjectTypeArray,
--   kObjectTypeDictionary,
--   kObjectTypeLuaRef,
--   // EXT types, cannot be split or reordered, see #EXT_OBJECT_TYPE_SHIFT
--   kObjectTypeBuffer,
--   kObjectTypeWindow,
--   kObjectTypeTabpage,
-- } ObjectType;

-- typedef int LuaRef;
-- struct object {
--   ObjectType type;
--   union {
--     Boolean boolean;
--     Integer integer;
--     Float floating;
--     String string;
--     Array array;
--     Dictionary dictionary;
--     LuaRef luaref;
--   } data;
-- };
-- typedef struct {
--   Object bg;
--   Object fg;
--   Object sp;
--   Object bold;
--   Object link;
--   Object blend;
--   Object cterm;
--   Object italic;
--   Object special;
--   Object ctermbg;
--   Object ctermfg;
--   Object default_;
--   Object reverse;
--   Object fallback;
--   Object standout;
--   Object nocombine;
--   Object undercurl;
--   Object underline;
--   Object background;
--   Object foreground;
--   Object global_link;
--   Object underdashed;
--   Object underdotted;
--   Object underdouble;
--   Object strikethrough;
-- } KeyDict_highlight;
-- extern HlAttrs dict2hlattrs(KeyDict_highlight *dict, bool use_rgb, int *link_id, Error *err);
-- extern void nvim_set_hl(Integer ns_id, String name, KeyDict_highlight *val, Error *err);
-- ]]
  -- local ns_id = ffi.new("Integer", 0)
  -- local ns_id = ffi.new("Object", 0)
  -- ffi.C.nvim_set_hl(0)
end